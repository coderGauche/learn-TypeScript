/*
 * @Author: Gauche楽
 * @Date: 2023-05-11 01:37:05
 * @LastEditors: Gauche楽
 * @LastEditTime: 2023-05-11 02:08:20
 * @FilePath: /class类型/14_抽象类和接口的区别.ts
 * 都可以实现多态的
 */

/**
 * abstract
 * 抽象类的特性：
 * 不可以被实例化
 * 含有声明但未实现的方法（也可以包含已实现的方法）
 * 一个类只能继承一个抽象类
 * 一旦有了抽象方法，就一定要把这个类声明为抽象类
 * 子类必须覆盖抽象类的抽象方法
 */

/**
 * interface
 * 接口的特性：
 * 不可以被实例化
 * 含有声明但未实现的方法
 * 一个类可以继承多个接口
 * 子类必须实现其声明未实现的方法
 * 所有成员都是默认 Public 的，因此接口中不能有 Private 成员
 * 子类必须实现接口的所有成员
 */

/**
 * 抽象类和接口的区别？
 * 抽象类是类（事物）的抽象，抽象类用来捕捉子类的通用特性，接口是行为的抽象
 * 接口可以被多层实现，而抽象类只能单一继承
 * 接口不具备继承的任何具体特点，仅仅承诺了能够调用的方法
 * 抽象类更多的定义是在一系列紧密相关的类之间，而接口大多数是定义在关系疏松但都实现某一功能的类中
 */

/**
 * 总结
 * 抽象类是对类本质的抽象，表达的是 is a 的关系。比如：male is a Human。
 * 抽象类包含并实现子类的通用特性，将子类存在差异化的特性进行抽象，交由子类去实现。
 * 接口是对行为的抽象，表达的是 like a 的关系。比如：Baoma like a plane（它有飞的功能一样可以飞），
 * 但其本质上 is a Car。接口的核心是定义行为，即实现类可以做什么，至于实现类主体是谁、是如何实现的，接口并不关心。
 */

/**
 * 老王的总结
 * 抽象类在很大程度上和接口会有些类似：都可以在其中定义一个方法，让子类或实现类来实现对应的方法
 * 区别：
 * 抽象类是事物的抽象，抽象类用来捕捉子类的通用特性，接口通常是一些行为的描述
 * 抽象类通常用于一些列紧密的类之间，接口只是用来描述一个类应该有的行为
 * 接口可被多层实现，而抽象类只能单一继承
 * 抽象类中可以有实现体，接口中只能有函数的声明
 */
